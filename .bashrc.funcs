# ap - append directory to the var if it's not already there and it exists
#      `ap -x` requires it to be nonempty as well.
#   usage: ap [var] value
function ap() {
  local nonempty=0
  if [ "$1" = "-x" ]
  then
    nonempty=1
    shift
  fi

  if [ $# -eq 2 ]
  then
    var="$1"
    shift
  else
    var=PATH
  fi
  if [[ "$var" =~ "$1:" ]]
  then
    return
  elif [ -d "$1" ]
  then
    if [[ $nonempty -eq 1 ]]
    then
      if [[ $(echo -n "$1/*") = "$1/*" ]]
      then
        return
      fi
    fi
    export ${var}="${!var}:$1"
  fi
}

function adc() {
  autoninja -C $csrc/out/dbg chrome "$@"
}

function arc() {
  autoninja -C $csrc/out/rel chrome "$@"
}

function ar2c() {
  autoninja -C $csrc/out/rel2 chrome "$@"
}

alias df='df -h'

function dt() {
    cd $dt/"$@"
}

alias du='du -h'

# csrc - cd to $csrc/$*
function csrc() {
  if [ ! -z "$csrc" ]
  then
    cd ${csrc}/"$@"
  else
    echo "not in a view"
  fi
}

function gb() {
  git map-branches "$@"
}

function gdu() {
  git diff @{u} "$@"
}

function gdun() {
  git diff @{u} --name-only "$@"
}

function geu() {
  ge $(git diff --name-only @{u} "$@")
}

function gng() {
  git grep "$@" -- \*.gn \*.gni
}

function gps() {
  git pull && gclient sync -D
}

function h() {
  history "$@"
}

# ip - insert directory at the front of the var if it's not already
#      there and it exists. `ip -x` requires it to be nonempty as well.
#   usage: ip [var] value
function ip() {
  local nonempty=0
  if [ "$1" = "-x" ]
  then
    nonempty=1
    shift
  fi

  if [ $# -eq 2 ]
  then
    var="$1"
    shift
  else
    var=PATH
  fi
  if ( echo "${!var}" | grep "$1:" > /dev/null )
  then
    return
  elif [ -d "$1" ]
  then
    if [[ $nonempty -eq 1 ]]
    then
      if [[ $(echo -n "$1/*") = "$1/*" ]]
      then
        return
      fi
    fi
    export ${var}="$1:${!var}"
  fi
}

alias ls='ls -F'

function mb() {
  $csrc/tools/mb/mb.py "$@"
}

function pset() {
  set | pset_aux "$@"
}

# redot - re-read dot files
function redot() {
  local old_view
  old_view=$view
  . ~/.bashrc
  if [ -n "$old_view" ]
  then
    sv $old_view
    cd -
  fi
}

function repeat() {
  count=$1
  shift

  while [ $count -ne 0 ]
  do
    "$@"
    if [ $? -gt 128 ]
    then
      return
    fi
    count=$((count - 1))
  done
}

# rp - remove path component
#   usage: rp [-a] [var] comp_regex
function rp() {
  if [ "$1" = "-a" ]
  then
    opt_g="g"
    shift
  else
    opt_g=""
  fi
  if [ $# -eq 2 ]
  then
    var=$1
    shift
  else
    var=PATH
  fi
  comp_regex=$1
  export ${var}="$(echo ${!var} | sed "s#[^:]*${comp_regex}[^:]*##${opt_g}" | \
                      sed "s/::*/:/g" | sed "s/^://" | sed "s/:$//")"
  unset comp_regex
  unset var
  unset opt_g
}


function setprompt() {
  if [ "$TERM" = "xterm" -o "$TERM" = "xterm-color" -o \
       "$TERM" = "xterm-256color" -o "$TERM" = "msys" -o "$TERM" = "cygwin" ]
  then
    if [ ! -z "$view" ]
    then
      if [ "$GIT_PRESENT" = "1" -a "$OSNAME" != "cygwin" ]
      then
        PS1='\[\e]0;\u@\h ($view|$(gitbranch)):\w\a\]\W $ '
      else
        PS1='\[\e]0;\u@\h ($view):\w\a\]\W $ '
      fi
    else
      PS1='\[\e]0;\u@\h:\w\a\]\W $ '
    fi
  else
    if [ ! -z "$view" ]
    then
      PS1="($view) \W $ "
    else
      PS1="\W $ "
    fi
  fi
}

function src() { cd $src/$* ; }

function sv() {
  if [ "$1" = "-d" ]
  then
    unset view csrc
    setprompt
    return
  fi

  local new_view=$1

  if [ ! -d "$src/$new_view" ]
  then
    echo "no such view '$new_view' under $src"
    return
  fi

  export view=$new_view
  export csrc=$(gcsrc $src/$new_view)
  setprompt
  cd $csrc
}

# Bash completion for sv()
# return any directories matching $src/c\.*
function _sv_comp() {
  local cur prev opts
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  opts=$(cd $src ; \ls -1 | grep '^c\.' | sed 's/c\.//g' | tr "\n" " ")

  COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
  return 0
}

complete -F _sv_comp sv

# echo current window size
function ws() {
    echo "${COLUMNS}x${LINES}"
}
