#
# .bashrc for Mac-specific stuff
#

if [ -d /Volumes/Src/src ]
then
    export src=/Volumes/Src/src
else
    export src=/src
fi

export bdir=xcodebuild

# override the MacOS svn with the one from ports
export PATH=/opt/subversion/bin:${PATH}:/opt/local/bin

if [ -d /Developer/usr/bin ]
then
  export PATH=${PATH/:\/usr\/bin/:/Developer/usr/bin:/usr/bin}
fi

ap /src/pylint/bin
ap /usr/local/git/bin
ap /usr/texbin

export MANPATH=${MANPATH}:/usr/local/man:/opt/local/man
export INFOPATH=${INFOPATH}:/usr/local/info:/opt/local/info

export PYTHONPATH=
function addappengpath() {
  PYTHONPATH=$PYTHONPATH:/usr/local/google_appengine/
  PYTHONPATH=$PYTHONPATH:/usr/local/google_appengine/lib/django
  PYTHONPATH=$PYTHONPATH:/usr/local/google_appengine/lib/webob
  PYTHONPATH=$PYTHONPATH:/usr/local/google_appengine/lib/yaml
}

export EMAIL_ADDRESS=dpranke@chromium.org

if [ -d /src/dotfiles ]
then
  export dotfiles=/src/dotfiles
fi

if [ -d "$src/depot_tools" -a -z "$depot_view" ]
then
    export PATH=${PATH}:${src}/depot_tools
fi

if [ -d /src/goma ]
then
  export GOMA=/src/goma
  export PATH=$GOMA:$PATH
  #export CC=clang
  #export CXX=clang++
  # if [ /bin/false -a -d "$csrc/third_party/llvm-build/Relase+Asserts/bin" ]
  #then
  #  export PATH=$csrc/third_party/llvm-build/Release+Asserts/bin:$PATH
  #fi
fi

function cbuild() {
  if [ -z "$csrc" ]
  then
    echo "not in a view"
    return
  fi

  if [ "$1" = "--debug" ]
  then
    cfg="Debug"
    shift
  else
    cfg="Release"
  fi
  if [ -n "$1" ]
  then
    target="$1"
  else
    target="All"
  fi

  ( set -x ; \
    cd $csrc/chrome; \
    time xcodebuild -project chrome.xcodeproj -configuration $cfg \
                    -target $target )
}


function clobber() {
  if [ -z "$csrc" ]
  then
    echo "not in a view"
  else
    echodo rm -fr $csrc/$bdir/*
  fi
}

function dbgpath() {
  if [ -z "$csrc" ]
  then
    echo "not in a view"
    return
  fi

  if echo $PATH | grep "$bdir/Release" > /dev/null
  then
    export PATH=$(echo $PATH | sed "s-$bdir/Release-$bdir/Debug-g")
  elif echo $PATH | grep "$bdir/Debug" > /dev/null
  then
    true; # do nothing, already present
  else
    export PATH=$PATH:${csrc}/${bdir}/Debug/TestShell.app/Contents/MacOS
    export PATH=$PATH:${csrc}/${bdir}/Debug
    export PATH=$PATH:${wk}/WebKitBuild/Debug
  fi
}

# run layout tests w/o any command line flags
function rwt() {
  time (echodo python $wks/new-run-webkit-tests $* )
}

function rwtc() {
  rwtd --chromium --local-expectations ~/local_expectations.txt $*
}

# run layout tests w/ common command line flags
function rwtd() {
  rwt --clobber-old-results --noshow-results --no-retry-failures \
      --no-new-test-results --print config,default $*
}

function relpath() {
  if [ -z "$csrc" ]
  then
    echo "not in a view"
    return
  fi

  if echo $PATH | grep "$bdir/Debug" > /dev/null
  then
    export PATH=$(echo $PATH | sed "s-$bdir/Debug-$bdir/Release-g")
  elif echo $PATH | grep "$bdir/Release" > /dev/null
  then
    true; # do nothing, already present
  else
    export PATH=$PATH:${csrc}/${bdir}/Release/TestShell.app/Contents/MacOS
    export PATH=$PATH:${csrc}/${bdir}/Release
    export PATH=$PATH:${wk}/WebKitBuild/Release
  fi
}

function tsbuild() {
  if [ -z "$csrc" ]
  then
    echo "not in a view"
    return
  fi

  if [ "$1" = "--debug" ]
  then
    cfg="Debug"
  else
    cfg="Release"
  fi
  ( set -x ; \
    cd $csrc/webkit/ ; \
    time xcodebuild -project webkit.xcodeproj -configuration $cfg \
                    -target All )
}

function gabuild() {
  if [ -z "$GOMA" ]
  then
    echo "goma not installed"
    return
  fi

  if [ -z "$csrc" ]
  then
    echo "not in a view"
    return
  fi

  if [ "$1" = "--debug" ]
  then
    cfg="Debug"
    shift
  else
    cfg="Release"
  fi

  if [ -n "$*" ]
  then
    target="$*"
  else
    target="All"
  fi

  if [ -n "$*" ]
  then
    target="$*"
  else
    target="All"
  fi

  ( set -x ; \
    cd $csrc/build ; \
    time $GOMA/goma-xcodebuild xcodebuild -project all.xcodeproj \
        -configuration $cfg -target $target )
}

function gbuild() {
  if [ -z "$GOMA" ]
  then
    echo "goma not installed"
    return
  fi

  if [ -z "$csrc" ]
  then
    echo "not in a view"
    return
  fi

  if [ "$1" = "--debug" ]
  then
    cfg="Debug"
    shift
  else
    cfg="Release"
  fi

  if [ -n "$*" ]
  then
    target="$*"
  else
    target="All"
  fi

  ( set -x ; \
    cd $csrc/webkit/ ; \
    time $GOMA/goma-xcodebuild xcodebuild -project webkit.xcodeproj \
        -configuration $cfg -target $target )
}

function gcbuild() {
  if [ -z "$GOMA" ]
  then
    echo "goma not installed"
    return
  fi

  if [ -z "$csrc" ]
  then
    echo "not in a view"
    return
  fi

  if [ "$1" = "--debug" ]
  then
    cfg="Debug"
    shift
  else
    cfg="Release"
  fi

  if [ -n "$*" ]
  then
    target="$*"
  else
    target="All"
  fi

  ( set -x ; \
    cd $csrc/chrome ; \
    time $GOMA/goma-xcodebuild xcodebuild -project chrome.xcodeproj \
        -configuration $cfg -target $target )
}


function gbuild-webkit() {
  if [ -z "$GOMA" ]
  then
    echo "goma not installed"
    return
  fi

  ( cd $wks ; $GOMA/goma-xcodebuild build-webkit $* )
}

function gbuild-dumprendertree() {
  if [ -z "$GOMA" ]
  then
    echo "goma not installed"
    return
  fi

  ( cd $wks ; $GOMA/goma-xcodebuild build-dumprendertree $* )
}


function gomastart() {
  $GOMA/goma_ctl.sh start
}
