#!/usr/bin/env python3
import argparse
import sys
import os

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-c',
        '--code',
        action='append',
        default=[],
        help='Encode the provided arg'
    )
    parser.add_argument(
        '-o',
        '--output',
        action='store',
        default='-',
        help='Write to the given file; can use "-" for stdout (the default)'
    )
    parser.add_argument(
        '-e',
        '--encode',
        action='store_true',
        default=True,
        help='Encode (escape) the data (the default)'
    )
    parser.add_argument(
        '-d',
        '--decode',
        action='store_false',
        dest='encode',
        help='Decode (unescape) the data'
    )
    parser.add_argument(
        'file',
        nargs='*',
        help='file(s) to process as input; if "-" is provided, use stdin'
    )
    args = parser.parse_args()
    if args.output and args.output != '-':
        out_fp = open(args.output, 'w', encoding='utf8')
    else:
        out_fp = sys.stdout

    if args.encode:
        func = encode
    else:
        func = decode
    try:
        for s in args.code:
            func(out_fp, s)

        files = args.file
        if not files and not args.code:
            files = ['-']
        for file in files:
            if file == '-':
                s = sys.stdin.read()
            else:
                with open(file, 'r') as fp:
                    s = fp.read()
            func(out_fp, s)
        return 0
    except Exception as e:
        import traceback; traceback.print_exception(e)
        import pdb; pdb.post_mortem()
        raise


def encode(fp, s):
    i = 0
    l = len(s)
    while i < l:
        if i < l - 1 and s[i] == '\\' and s[i+1] == 'n':
            fp.write('\\n\n')
            i += 2
        else:
            fp.write(s[i])
            i += 1


def decode(fp, s):
    i = 0
    l = len(s)
    while i < l:
        if s[i] == '\\' and s[i+1] == 'n' and s[i+2] == '\n':
            fp.write('\\n')
            i += 3
        else:
            fp.write(s[i])
            i += 1


if __name__ == '__main__':
    sys.exit(main())


