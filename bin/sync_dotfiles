#!/bin/bash
if [ "$src" = "" ]
then
  if [ -d "$HOME/src" ]
  then
    src="$HOME/src"
  elif [ -d "$HOME/Documents/src" ]
  then
    src="$HOME/Documents/src"
  elif [ -d "/c/src" ]
  then
    src=/c/src
  elif [ -d "/cygdrive/c/src" ]
  then
    src=/cygdrive/c/src
  fi
fi

if [ "$WHOME" = "" ]
then
  if [ -d "/c/Users/$USER" ]
  then
    WHOME="/c/Users/$USER"
  elif [ -d "/c/cygdrive/Users/$USER" ]
  then
    WHOME="/c/cygdrive/Users/$USER"
  fi
fi

REPODIR=$src/dotfiles
USERDIR=$HOME

function usage() {
  echo "usage: sync_dotfiles [-hnruv] [ -R repo-dir ] [ -U user-dir ] "
  echo "  -h -> show-usage"
  echo "  -n -> no-execute"
  echo "  -r -> refresh repo ($REPODIR) from user ($USERDIR)"
  echo "  -u -> refresh user ($USERDIR) from repo ($REPODIR)"
  echo "  -w -> use \$WHOME ($WHOME) instead of \$HOME"
  echo "  -v -> verbose"
  exit 1
}

failed=0
errfile=$(mktemp)

opt_n=0
opt_r=0
opt_u=0
opt_v=0
while getopts hnrR:uU:vw arg
do
  case "$arg" in
    h) usage   ;;
    n) opt_n=1 ;;
    r) opt_r=1 ;;
    R) REPODIR=$OPTARG ;;
    u) opt_u=1 ;;
    U) USERDIR=$OPTARG ;;
    v) opt_v=1 ;;
    w) USERDIR="$WHOME" ;;
    *) usage ;;
  esac
done

if [ ! -d $REPODIR ]
then
    echo "Couldn't find your repo dir at $REPODIR."
    exit 1
fi
if [ ! -d $USERDIR ]
then
    echo "Couldn't find your home dir at $USERDIR."
    exit 1
fi

if [ $opt_r -eq 0 -a $opt_u -eq 0 ]
then
  echo "Must specify either -r or -u"
  exit 1
fi

if ! which cmp > /dev/null 2>&1
then
  echo "\`cmp\` not found; install \`diffutils\`"
  exit 1
fi

declare -a dotdirs=(
  bat
  bin
  mbin
)

declare -a dotfiles=(
  .bash_profile
  .bashrc
  .bashrc.funcs
  .bashrc.funcs.linux
  .bashrc.funcs.mac
  .bashrc.funcs.win
  .bashrc.linux
  .bashrc.local.$HOSTNAME
  .bashrc.mac
  .bashrc.win
  .git_completion.bash
  .gitignore_global
  .gvimrc
  .hushlogin
  .set_path-$HOSTNAME.bat
  .vimrc
  _gvimrc
  _vimrc
  bat/ap.bat
  bat/check_init_script.bat
  bat/check_opath.bat
  bat/compare_opath.bat
  bat/csrc.bat
  bat/e.bat
  bat/ep.bat
  bat/esco.bat
  bat/ge.bat
  bat/home.bat
  bat/init.cmd
  bat/ip.bat
  bat/install_init_script.bat
  bat/ptime.bat
  bat/redot.bat
  bat/sel.bat
  bat/set_path.bat
  bat/src.bat
  bat/sv.bat
  bat/sync_dotfiles.bat
  bat/uninstall_init_script.bat
  bat/update_opath.bat
  bat/v.bat
  bat/whome.bat
  bin/awksel
  bin/dub
  bin/echodo
  bin/ep
  bin/esco
  bin/fl
  bin/gcsrc
  bin/git-update-branch
  bin/pset_aux
  bin/ptime
  bin/sel
  bin/st
  bin/sync_dotfiles
  mbin/backup_mbp
  mbin/backup_mini
  mbin/mvim
)

function echodo() {
  if [ $opt_n -o $opt_v ]
  then
    echo "$@"
  fi
  if [ $opt_n -eq 0 ]
  then
    $@
  fi
}

function mkdirif() {
  if [ ! -d $1 ]
  then
    echodo mkdir $1
  fi
}

function cpif() {
  if [ ! -f $1 ]
  then
    echo "Error: tried to sync \`$1\` which doesn't exist" >> $errfile
    failed=1
  elif [ ! -f $2 ]
  then
    echodo cp -p $1 $2
  elif ! cmp --quiet $1 $2
  then
    echodo cp -p $1 $2
  fi
}

if [ $opt_u -eq 1 ]
then
  src=$REPODIR
  dst=$USERDIR
else
  src=$USERDIR
  dst=$REPODIR
fi

for i in "${dotdirs[@]}"
do
  mkdirif $dst/$i
done

for i in "${dotfiles[@]}"
do
  cpif $src/$i $dst/$i
done

if [[ $opt_n -eq 0 ]]
then
  for i in "${dotdirs[@]}"
  do
    srcfiles=$(mktemp)
    ls -1 $src/$i > $srcfiles
    dstfiles=$(mktemp)
    ls -1 $dst/$i > $dstfiles
    difffile=$(mktemp)
    if ! (diff $srcfiles $dstfiles > $difffile)
    then
      echo "$src/$i and $dst/$i don't match:" >> $errfile
      cat $difffile >> $errfile
      failed=1
    fi
    rm $srcfiles $dstfiles $difffile
  done
fi

difffile=$(mktemp)
if ! diff $REPODIR/.vimrc $REPODIR/_vimrc > $difffile
then
  echo "Error: .vimrc and _vimrc are different" >> $errfile
  cat $difffile >> $errfile
  failed=1
fi
if ! diff $REPODIR/.gvimrc $REPODIR/_gvimrc > $difffile
then
  echo "Error: .gvimrc and _gvimrc are different" >> $errfile
  cat $difffile >> $errfile
  failed=1
fi
rm $difffile

if [[ $failed -eq 1 ]]
then
  echo
  cat $errfile
fi
rm $errfile
exit $failed
