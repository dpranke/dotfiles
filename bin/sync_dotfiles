#!/bin/bash
if [ "$src" = "" ]
then
  if [ -d "/mnt/c/src" ]
  then
    src=/mnt/c/src
  elif [ -d "$HOME/Documents/src" ]
  then
    src="$HOME/Documents/src"
  elif [ -d "$HOME/src" ]
  then
    src="$HOME/src"
  fi
fi

if [ "$WHOME" = "" ]
then
  if [ -d "/mnt/c/Users/$USER" ]
  then
    WHOME=/mnt/c/Users/$USER
  fi
fi

REPODIR=$src/dotfiles
USERDIR=$HOME

function usage() {
  echo "usage: sync_dotfiles [-hnruv] [ -R repo-dir ] [ -U user-dir ] "
  echo "  -h -> show-usage"
  echo "  -n -> no-execute"
  echo "  -r -> refresh repo ($REPODIR) from user ($USERDIR)"
  echo "  -u -> refresh user ($USERDIR) from repo ($REPODIR)"
  echo "  -w -> use \$WHOME ($WHOME) instead of \$HOME"
  echo "  -v -> verbose"
  exit 1
}


opt_n=0
opt_r=0
opt_u=0
opt_v=0
while getopts hnrR:uU:vw arg
do
  case "$arg" in
    h) usage   ;;
    n) opt_n=1 ;;
    r) opt_r=1 ;;
    R) REPODIR=$OPTARG ;;
    u) opt_u=1 ;;
    U) USERDIR=$OPTARG ;;
    v) opt_v=1 ;;
    w) USERDIR="$WHOME" ;;
    *) usage ;;
  esac
done

if [ ! -d $REPODIR ]
then
    echo "Couldn't find your repo dir at $REPODIR."
    exit 1
fi
if [ ! -d $USERDIR ]
then
    echo "Couldn't find your home dir at $USERDIR."
    exit 1
fi

if [ $opt_r -eq 0 -a $opt_u -eq 0 ]
then
  echo "Must specify either -r or -u"
  exit 1
fi

declare -a dotdirs=(
  bin
  mbin
  wbin
)

declare -a dotfiles=(
  .bash_profile
  .bashrc
  .bashrc.funcs
  .bashrc.funcs.linux
  .bashrc.funcs.mac
  .bashrc.funcs.win
  .bashrc.linux
  .bashrc.mac
  .bashrc.win
  .git_completion.bash
  .gitignore_global
  .gvimrc
  .hushlogin
  .vimrc
  bin/awksel
  bin/dub
  bin/echodo
  bin/ep
  bin/esco
  bin/fl
  bin/gcsrc
  bin/git-update-branch
  bin/pset_aux
  bin/sel
  bin/st
  bin/sync_dotfiles
  mbin/backup_mbp
  mbin/backup_mini
  mbin/mvim
  wbin/gclient
  wbin/git
  wbin/gvim
  wbin/vim
  wbin/wpython
  wbin/wpython3
)

declare -a batdirs=(
  bat
)

declare -a batfiles=(
  _gvimrc
  _vimrc
  bat/csrc.bat
  bat/ep.bat
  bat/esco.bat
  bat/home.bat
  bat/ptime.bat
  bat/ptime.py
  bat/redot.bat
  bat/sel.bat
  bat/setdirs.bat
  bat/src.bat
  bat/sv.bat
  bat/sync_dotfiles.bat
  bat/whome.bat
)

function echodo() {
  if [ $opt_n -o $opt_v ]
  then
    echo "$@"
  fi
  if [ $opt_n -eq 0 ]
  then
    $@
  fi
}

function mkdirif() {
  if [ ! -d $1 ]
  then
    echodo mkdir $1
  fi
}

function cpif() {
  if [ ! -f $1 ]
  then
    echodo cp -p $1 $2
  elif ! cmp --quiet $1 $2
  then
    echodo cp -p $1 $2
  fi
}

if [ $opt_u -eq 1 ]
then
  src=$REPODIR
  dst=$USERDIR
else
  src=$USERDIR
  dst=$REPODIR
fi

for i in "${dotdirs[@]}"
do
  mkdirif $dst/$i
done

for i in "${dotfiles[@]}"
do
  cpif $src/$i $dst/$i
done

for i in "${batdirs[@]}"
do
  mkdirif $dst/$i
done

for i in "${batfiles[@]}"
do
  cpif $src/$i $dst/$i
done

cpif $src/_vimrc $dst/_vimrc
cpif $src/_gvimrc $dst/_gvimrc

if ! cmp $dst/_vimrc $dst/.vimrc
then
  echo "Warning: _vimrc and .vimrc are different"
fi
if ! cmp $dst/_gvimrc $dst/_gvimrc
then
  echo "Warning: _gvimrc and .gvimrc are different"
fi
