#!/bin/bash

function usage() {
  echo "usage: sync_dotfiles [-hnruv] [ -R repo-dir ] [ -H home-dir ] "
  echo "  -h -> show-usage"
  echo "  -n -> no-execute"
  echo "  -r -> refresh repo from home"
  echo "  -u -> refresh user from repo"
  echo "  -v -> verbose"
  exit 1
}

BASEDIR=$(dirname "$0")/..
HOMEDIR=$HOME
if [ -f $HOME/.dotfiles_repo_dir ]
then
  REPODIR=$(cat $HOME/.dotfiles_repo_dir)
elif [ -d "$BASEDIR/../.git" ] && \
    grep -q 'url = https://github.com/dpranke/dotfiles' \
    "$BASEDIR/../.git/config"
then
  REPODIR=$BASEDIR/..
else
  REPODIR=$src/dotfiles
fi

opt_n=0
opt_r=0
opt_u=0
opt_v=0
while getopts hH:nrR:uU:v arg
do
  case "$arg" in
    R) REPODIR=$OPTARG ;;
    h) usage   ;;
    H) HOMEDIR=$OPTARG ;;
    n) opt_n=1 ;;
    r) opt_r=1 ;;
    u) opt_u=1 ;;
    v) opt_v=1 ;;
    *) usage ;;
  esac
done

if [ ! -d $REPODIR ]
then
    echo "Couldn't find your repo dir."
    exit 1
fi
if [ ! -d $HOMEDIR ]
then
    echo "Couldn't find your home dir at $HOMEDIR."
    exit 1
fi

if [ $opt_v -eq 1 ]
then
  echo "HOMEDIR=$HOMEDIR"
  echo "REPODIR=$REPODIR"
  echo echo $REPODIR ">" $HOMEDIR/.dotfiles_repo_dir
fi
if [ $opt_n -eq 0 ]
then
  echo $REPODIR > $HOMEDIR/.dotfiles_repo_dir
fi

function maybe_mkdir() {
  dir="$1"
  if [ \( ! -d "$dir" \) -a \( ! -f "$dir" \) ]
  then
    if [ $opt_n -eq 1 -o $opt_v -eq 1 ]
    then
        echo mkdir -p "$dir"
    fi
    if [ $opt_n -eq 0 ]
    then
      mkdir -p "$dir"
      if [ ! $? ]
      then
        echo "mkdir -p \"$dir\" failed: $?"
        exit $?
      fi
    fi
  fi
}

function copy() {
  echo cp -pR "$1" "$2"
  if [ $opt_n -eq 0 ]
  then
    cp -pR "$1" "$2"
    if [ ! $? ]
    then
      echo "  failed: $?"
      exit $?
    fi
  fi
}

function copynewer() {
  f="$1"
  if [ \( $opt_r -eq 1 \) -o \
          \( \( $opt_u -eq 0 \) -a  "$REPODIR/$f" -nt "$HOMEDIR/$f" \) ]
  then
    copy "$REPODIR/$f" "$HOMEDIR/$f"
  elif [ \( $opt_u -eq 1 \) -o \( "$HOMEDIR/$f" -nt "$REPODIR/$f" \) ]
  then
    copy "$HOMEDIR/$f" "$REPODIR/$f"
  fi
}

cd "$REPODIR"
for f in $(git ls-files | grep -v '^.gitignore')
do
  d=$(dirname "$f")
  maybe_mkdir "$HOMEDIR/$d"
  if [ -h "$REPODIR/$f" ]
  then
    # TODO: This doesn't handle the two links pointing to two different
    # destinations.
    if [ ! -h "$HOMEDIR/$f" ]
    then
      copynewer "$REPODIR/$f" "$HOMEDIR/$f"
    fi
  elif ! diff -q $HOMEDIR/$f $REPODIR/$f > /dev/null 2> /dev/null
  then
    copynewer "$f"
  elif [ $opt_v -eq 1 ]
  then
    echo "# $f is up-to-date"
  fi
done
