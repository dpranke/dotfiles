#!/usr/bin/env python3
import argparse
import sys
import os

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-c',
        '--code',
        action='append',
        default=[],
        help='Encode the provided arg'
    )
    parser.add_argument(
        '-o',
        '--output',
        action='store',
        default='-',
        help='Write to the given file; can use "-" for stdout (the default)'
    )
    parser.add_argument(
        '-e',
        '--encode',
        action='store_true',
        default=True,
        help='Encode (escape) the data (the default)'
    )
    parser.add_argument(
        '-d',
        '--decode',
        action='store_false',
        dest='encode',
        help='Decode (unescape) the data'
    )
    parser.add_argument(
        'file',
        nargs='*',
        help='file(s) to process as input; if "-" is provided, use stdin'
    )
    args = parser.parse_args()
    if args.output and args.output != '-':
        out_fp = open(args.output, 'w', encoding='utf8')
    else:
        out_fp = sys.stdout

    if args.encode:
        func = encode
    else:
        func = decode

    files = args.file
    if not files and not args.code:
        files = ['-']

    for i, s in enumerate(args.code):
        last = ((i == (len(args.code) - 1)) and not files)
        func(out_fp, s, last)

    for i, file in enumerate(files):
        if file == '-':
            s = sys.stdin.read()
        else:
            with open(file, 'r') as fp:
                s = fp.read()
        last = (i == (len(files) - 1))
        func(out_fp, s, last)

    return 0


def encode(fp, s, last):
    fp.write(s)
    if last:
        fp.write('\n')

def decode(fp, s, last):
    if last:
        fp.write(s[:-1])
    else:
        fp.write(s)


if __name__ == '__main__':
    sys.exit(main())


