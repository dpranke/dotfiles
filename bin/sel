#!/usr/bin/env python3

"""sel - select fields from a file"""

import argparse
import csv
import re
import fileinput
import json
import sys


def main(argv):
    args = _parse_args()

    if args.output == '-':
        file = sys.stdout
    else:
        file = open(args.output, 'w')

    if args.input_is_json:
        reader = _JSONReader(args)
    elif args.input_is_json_lines:
        reader = _JSONLinesReader(args)
    elif args.input_is_csv:
        reader = _CSVReader(args)
    else:
        reader = _TextReader(args)

    if args.json:
        writer = _JSONWriter(args, file)
    elif args.json_lines:
        writer = _JSONLinesWriter(args, file)
    elif args.csv:
        writer = _CSVWriter(args, file)
    else:
        writer = _TextWriter(args, file)

    try:
        for fields in reader:
            values = writer.values(fields)
            writer.write_row(values)
    except _NamesOnObjects:
        print(
            "Can't specify --names when the input is a list of objects.",
            file=sys.stderr,
        )
        return 1

    writer.write_end()
    return 0


def _parse_args():
    parser = argparse.ArgumentParser(
        usage='sel [options] [<int>(,<int>)*] [file...]',
    )
    parser.add_argument(
        '-a', '--all', action='store_true', help='select all the fields'
    )
    parser.add_argument('-C', '--input-is-csv', action='store_true')
    parser.add_argument(
        '-c', '--csv', action='store_true', help='output as CSV'
    )
    parser.add_argument(
        '-F',
        dest='fs',
        metavar='fs',
        action='store',
        default=r'\s+',
        help="input field separator regexp (default=r'%(default)s')",
    )
    parser.add_argument('-H', '--no-header-row', action='store_true')
    parser.add_argument('-J', '--input-is-json', action='store_true')
    parser.add_argument(
        '-j', '--json', action='store_true', help='output as JSON'
    )
    parser.add_argument(
        '-L',
        '--input-is-jsonl',
        '--input-is-json-lines',
        dest='input_is_json_lines',
        action='store_true',
    )
    parser.add_argument(
        '-l',
        '--jsonl',
        '--json-lines',
        dest='json_lines',
        action='store_true',
        help='output as JSON Lines',
    )
    parser.add_argument(
        '-o',
        '--output',
        metavar='<file>',
        action='store',
        default='-',
        help='output to <file> (default is stdout)',
    )
    parser.add_argument(
        '-n',
        '--names',
        action='store',
        help='comma-separated list of column names. Needed if there is '
        "-H/--no-header-row, your input data isn't a list of objects, "
        'and you want to refer to columns by name instead of number.',
    )
    parser.add_argument(
        '-O',
        dest='ofs',
        metavar='ofs',
        action='store',
        default=' ',
        help="output field separator string (default='%(default)s')",
    )
    parser.add_argument(
        '-K',
        '--objects',
        action='store_true',
        help='Write output as objects instead of arrays (only works with '
        '-j/--json and -L/--json-lines)',
    )

    missing_fields_err = 'sel: the following arguments are required: fields'
    orig_error = parser.error

    def error(msg):
        if msg == missing_fields_err:
            return
        orig_error(msg)

    parser.error = error
    args, remaining = parser.parse_known_args()
    if args.all:
        args.file = remaining
        args.fields_have_names = False
    elif not remaining:
        orig_error(missing_fields_err)
    else:
        args.fields = remaining[0]
        args.file = remaining[1:]

    if (
        (args.input_is_csv and args.input_is_json)
        or (args.input_is_csv and args.input_is_json_lines)
        or (args.input_is_json and args.input_is_json_lines)
    ):
        print(
            'Only one of -C/--input-is-csv, -J/--input-is-json, and '
            '-L/--input-is-json-lines can be specified',
            file=sys.stderr,
        )
        sys.exit(1)

    if (
        (args.input_is_csv and args.json)
        or (args.csv and args.json_lines)
        or (args.json and args.json_lines)
    ):
        print(
            'Only one of -c/--csv, -j/--json, or -l/--json-lines can be '
            'specified',
            file=sys.stderr,
        )
        sys.exit(1)

    if not args.all:
        if re.match(r'(-?\d+)(,-?\d+)*$', args.fields):
            args.fields_have_names = False
            args.indices = [int(x) for x in args.fields.split(',')]
        elif re.match(r'\w+(,\w+)*$', args.fields):
            args.fields_have_names = True
            args.indices = args.fields.split(',')
        else:
            print(f'Bad field spec "{args.fields}"', file=sys.stderr)
            sys.exit(1)

    if args.names and (
        (not args.no_header_row)
        and not args.input_is_json
        and not args.input_is_json_lines
    ):
        print(
            "Can't specify --names when there is a header row", file=sys.stderr
        )
        sys.exit(1)

    if args.objects and not args.json and not args.json_lines:
        print(
            '--objects only works when writing JSON or JSON Lines',
            file=sys.stderr,
        )
        sys.exit(1)
    return args


class _BaseReader:
    def __init__(self, args):
        self.args = args
        self.reader = fileinput.input(args.file, encoding='utf8')

    def __iter__(self):
        return self

    def __next__(self):
        return next(self.reader).strip()


class _JSONReader:
    def __init__(self, args):
        self.args = args
        if args.file:
            self.files = args.file[:]
        else:
            self.files = ['-']
        self.decoder = json.JSONDecoder()
        self.fp = None
        self.filename = None
        self.txt = None
        self.end = None
        self.pos = None
        self.ch = None
        self.empty = True

    def __iter__(self):
        return self

    def __next__(self):
        if not self.fp:
            self._next_file()
        self._skip()
        if self.txt[self.pos] == ']':
            self.pos += 1
            self._skip()
            if self.pos != self.end or self.files != []:
                raise json.JSONDecodeError(self.txt, self.pos)
            raise StopIteration

        obj, newpos = self.decoder.raw_decode(self.txt, self.pos)
        self.pos = newpos
        return obj

    def _next_file(self):
        if self.fp and self.filename != '-':
            self.fp.close()
        if not self.files:
            raise StopIteration

        self.filename = self.files.pop(0)
        if self.filename == '-':
            self.fp = sys.stdin
        else:
            self.fp = open(self.filename)
        self.txt = self.fp.read()
        self.end = len(self.txt)
        self.pos = 0

    def _skip(self):
        found_ch = False
        while True:
            if self.pos == self.end:
                self._next_file()
                continue
            c = self.txt[self.pos]
            if c.isspace():
                self.pos += 1
                continue
            if self.empty and c == '[' and not found_ch:
                self.empty = False
                found_ch = True
                self.pos += 1
                continue
            if not self.empty and c == ',' and not found_ch:
                found_ch = True
                self.pos += 1
                continue
            break


class _JSONLinesReader(_BaseReader):
    def __next__(self):
        line = next(self.reader).strip()
        obj = json.loads(line)
        return obj


class _CSVReader(_BaseReader):
    def __init__(self, args):
        super().__init__(args)
        self.csv_reader = csv.reader(self.reader)

    def __next__(self):
        return next(self.csv_reader)


class _TextReader(_BaseReader):
    def __init__(self, args):
        super().__init__(args)
        self.pat = re.compile(args.fs)

    def __next__(self):
        return self.pat.split(next(self.reader))


class _BaseWriter:
    def __init__(self, args, file):
        self.args = args
        self.file = file
        self.name_lookup = None
        self.names = []
        self.indices = None

    def values(self, fields):
        if not isinstance(fields, dict):
            fields = list(fields)
        if self.indices is None:
            self._compute_indices(fields)

        if self.args.objects:
            if isinstance(fields, dict):
                if self.args.all:
                    return fields
            return {
                name: self._lookup(fields, self.name_lookup[name])
                for name in self.indices
            }
        return [self._lookup(fields, i) for i in self.indices]

    def write_row(self):
        raise NotImplementedError

    def write_end(self):
        pass

    def _compute_indices(self, fields):
        if not self.args.fields_have_names:
            if self.args.all:
                if isinstance(fields, dict):
                    self.indices = list(fields.keys())
                else:
                    self.indices = list(range(len(fields)))
                return
            field_indices = [int(f) for f in self.args.fields.split(',')]
            self.indices = [x - 1 if x > 0 else x for x in field_indices]
            return

        if isinstance(fields, dict):
            if self.args.names:
                raise _NamesOnObjects()

            if self.args.all:
                field_indices = fields.keys()
            else:
                field_indices = self.args.fields.split(',')
            if self.args.objects:
                self.name_lookup = {f.lower(): f for f in fields.keys()}
                self.indices = [
                    self.name_lookup[f.lower()] for f in field_indices
                ]
                return
            self.name_lookup = {f.lower(): f for f in fields.keys()}
            self.indices = [self.name_lookup[f] for f in field_indices]
            return

        if not self.args.no_header_row:
            if self.args.all:
                self.indices = [i for i in range(len(fields))]
            else:
                self.name_lookup = {
                    f.tolower(): i for i, f in enumerate(fields)
                }
                self.indices = [self.name_lookup[f] for f in field_indices]
            return

        if self.args.names:
            names = self.args.names.split(',')
            if self.args.objects:
                if isinstance(fields, dict):
                    if self.args.all:
                        field_indices = fields.keys()
                    else:
                        field_indices = self.args.fields.split(',')
                    self.name_lookup = {n.lower(): n for n in names}
                    self.indices = [
                        self.name_lookup[f.lower()] for f in field_indices
                    ]
                    return

                self.name_lookup = {name: i for i, name in enumerate(names)}
                self.indices = [i for i, name in enumerate(field_indices)]
                return

            self.name_lookup = {
                n.lower(): i for i, n in enumerate(names, start=0)
            }
            self.indices = [self.name_lookup[name] for name in field_indices]
            return

        raise _NoColumnNames()

    def _lookup(self, fields, index):
        if isinstance(index, str):
            return fields[index]
        if index >= 0 and index < len(fields):
            return fields[index]
        if index < 0 and -index < len(fields):
            return fields[index]


class _JSONWriter(_BaseWriter):
    def __init__(self, args, file):
        super().__init__(args, file)
        self.empty = True

    def write_row(self, values):
        if self.empty:
            print('[\n  ', end='', file=self.file)
        else:
            print(',\n  ', end='', file=self.file)
        json.dump(values, fp=self.file)
        self.empty = False

    def write_end(self):
        if self.empty:
            print('[]', file=self.file)
        else:
            print('\n]', file=self.file)


class _JSONLinesWriter(_BaseWriter):
    def write_row(self, values):
        json.dump(values, fp=self.file)
        print('', file=self.file)


class _CSVWriter(_BaseWriter):
    def __init__(self, args, file):
        super().__init__(args, file)
        self.csv_writer = csv.writer(file)
        self.empty = True

    def write_row(self, values):
        if self.empty:
            self.csv_writer.writerow(self.indices)
            self.empty = False
        self.csv_writer.writerow(values)


class _TextWriter(_BaseWriter):
    def write_row(self, values):
        print(self.args.ofs.join(values), file=self.file)


class _NoColumnNames(Exception):
    """Raised when we don't know how to convert column names to indices."""

    pass


class _NamesOnObjects(Exception):
    """Raised when the input is a list of objects and --names was passed."""

    pass


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
