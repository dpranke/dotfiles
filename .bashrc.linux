#
# .bashrc for Linux Google-specific stuff
#

export src=/src
export bdir=out

if [ -d $src/depot_tools ]
then
    export PATH=${PATH}:${src}/depot_tools
fi

export PYTHONPATH=

unset GOMA
if [ -d /src/goma ]
then
  export GOMA=/src/goma
  export PATH=$GOMA:${PATH}
fi

if [ -d /usr/local/gold/bin ]
then
  export PATH=/usr/local/gold/bin:${PATH}
  export CXX="g++ -B/usr/local/gold/bin"
fi


export GYP_DEFINES=target_arch=x64

export EMAIL_ADDRESS=dpranke@chromium.org

if [ -d /Dropbox/Shared/dotfiles ]
then
  export dotfiles=/Dropbox/Shared/dotfiles
elif [ -d $HOME/Dropbox/Shared/dotfiles ]
then
  export dotfiles=$HOME/Dropbox/Shared/dotfiles
fi


if [ -n "$DISPLAY" ]
then
   export DEFAULT_DISPLAY=$DISPLAY
fi

function cbuild() {
  if [ -z "$csrc" ]
  then
    echo "not in a view"
    return
  fi

  if [ "$1" = "--debug" ]
  then
    cfg="Debug"
    shift
  else
    cfg="Release"
  fi
  if [ -n "$1" ]
  then
    target="$1"
  else
    target="chrome"
  fi

  ( set -x ; cd $csrc ; time make -j 5 BUILDTYPE=$cfg $target )
}


function clobber() {
  if [ -z "$csrc" ]
  then
    echo "not in a view"
  else
    echodo rm -fr $csrc/$bdir/*
  fi
}


function dbgpath() {
  if [ -z "$csrc" ]
  then
    echo "not in a view"
    return
  fi

  if echo $PATH | grep "$bdir/Release" > /dev/null
  then
    export PATH=$(echo $PATH | sed "s-$bdir/Release-$bdir/Debug-")
  elif echo $PATH | grep "$bdir/Debug" > /dev/null
  then
    true; # do nothing, already present
  else
    export PATH=$PATH:${csrc}/${bdir}/Debug
  fi
}


function defdis() {
  export DISPLAY=$DEFAULT_DISPLAY
}


function edis() {
  echo $DISPLAY
}


# run layout tests w/o any command line flags
function rwt() {
  time (echodo python $wks/new-run-webkit-tests $* )
}


# run layout tests w/ command command line flags
function rwtd() {
  rwt --clobber-old-results --print config,default --noshow-results \
      --no-new-test-results --no-retry-failures $*
}


# run layout tests under python debugger
function rwtdbg() {
  python -m pdb $wks/new-run-webkit-tests $*
}


function nulldis() {
  if [ $(ps auxww | grep Xvfb | grep -v  grep | wc -l) = 0 ]
  then
    Xvfb :4 -screen 0 1024x768x24 -ac &
  fi
  export DISPLAY=:4
}


function relpath() {
  if [ -z "$csrc" ]
  then
    echo "not in a view"
    return
  fi

  if echo $PATH | grep "$bdir/Debug" > /dev/null
  then
    export PATH=$(echo $PATH | sed "s-$bdir/Debug-$bdir/Release-")
  elif echo $PATH | grep "$bdir/Release" > /dev/null
  then
    true; # do nothing, already present
  else
    export PATH=$PATH:${csrc}/$bdir/Release
  fi
}


function tsbuild() {
  if [ -z "$csrc" ]
  then
    echo "not in a view"
    return
  fi

  if [ "$1" = "--debug" ]
  then
    cfg="Debug"
  else
    cfg="Release"
  fi

  ( set -x ; cd $csrc ; \
    time make -j 5 BUILDTYPE=$cfg test_shell test_shell_tests DumpRenderTree ImageDiff )
}

function gabuild() {
  if [ -z "$GOMA" ]
  then
    echo "goma not installed"
    return
  fi

  if [ -z "$csrc" ]
  then
    echo "not in a view"
    return
  fi

  if [ "$1" = "--debug" ]
  then
    cfg="Debug"
    shift
  else
    cfg="Release"
  fi

  if [ -n "$*" ]
  then
    target="$*"
  else
    target="all"
  fi

  ( set -x ; \
    cd $csrc ; PATH="$GOMA:$PATH" \
    time make -j 100 BUILDTYPE=$cfg $target )
}


function gbuild() {
  if [ -z "$csrc" ]
  then
    echo "not in a view"
    return
  fi

  if [ "$1" = "--debug" ]
  then
    cfg="Debug"
    shift
  else
    cfg="Release"
  fi

  if [ -n "$*" ]
  then
    targets="$*"
  else
    targets="chrome"
  fi

  ( set -x ; cd $csrc ; PATH="$GOMA:$PATH" \
    time make -r -j 100 BUILDTYPE=$cfg $targets )
}

function gomabuild() {
  if [ -z "$GOMA" ]
  then
    echo "goma is not installed."
    return
  fi
  gbuild $*
}

function gomastart() {
  if [ -z "$GOMA" ]
  then
    echo "goma is not installed."
    return
  fi
  $GOMA/goma_ctl.sh start
}

function gomastop() {
  if [ -z "$GOMA" ]
  then
    echo "goma is not installed."
    return
  fi
  $GOMA/goma_ctl.sh stop
}
